// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/30/2017 22:01:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cam482
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cam482_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [1:0] data_in;
reg [47:0] key_in;
reg [4:0] next_replace_addr;
reg next_replace_en;
reg [31:0] overwrite_hit_bits;
reg overwrite_hit_en;
reg [31:0] overwrite_valid_bits;
reg overwrite_valid_en;
reg reset;
reg wr_en;
// wires                                               
wire [1:0] data_out;
wire hit;
wire [31:0] hit_bits;
wire [31:0] valid_bits;

// assign statements (if any)                          
cam482 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_in(data_in),
	.data_out(data_out),
	.hit(hit),
	.hit_bits(hit_bits),
	.key_in(key_in),
	.next_replace_addr(next_replace_addr),
	.next_replace_en(next_replace_en),
	.overwrite_hit_bits(overwrite_hit_bits),
	.overwrite_hit_en(overwrite_hit_en),
	.overwrite_valid_bits(overwrite_valid_bits),
	.overwrite_valid_en(overwrite_valid_en),
	.reset(reset),
	.valid_bits(valid_bits),
	.wr_en(wr_en)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #60000 1'b0;
end 
// key_in[ 47 ]
initial
begin
	key_in[47] = 1'b1;
end 
// key_in[ 46 ]
initial
begin
	key_in[46] = 1'b0;
end 
// key_in[ 45 ]
initial
begin
	key_in[45] = 1'b1;
end 
// key_in[ 44 ]
initial
begin
	key_in[44] = 1'b0;
	key_in[44] = #160000 1'b1;
	key_in[44] = #120000 1'b0;
	key_in[44] = #130000 1'b1;
	key_in[44] = #120000 1'b0;
end 
// key_in[ 43 ]
initial
begin
	key_in[43] = 1'b0;
end 
// key_in[ 42 ]
initial
begin
	key_in[42] = 1'b0;
end 
// key_in[ 41 ]
initial
begin
	key_in[41] = 1'b0;
end 
// key_in[ 40 ]
initial
begin
	key_in[40] = 1'b0;
end 
// key_in[ 39 ]
initial
begin
	key_in[39] = 1'b0;
end 
// key_in[ 38 ]
initial
begin
	key_in[38] = 1'b0;
end 
// key_in[ 37 ]
initial
begin
	key_in[37] = 1'b0;
end 
// key_in[ 36 ]
initial
begin
	key_in[36] = 1'b0;
end 
// key_in[ 35 ]
initial
begin
	key_in[35] = 1'b0;
end 
// key_in[ 34 ]
initial
begin
	key_in[34] = 1'b0;
end 
// key_in[ 33 ]
initial
begin
	key_in[33] = 1'b0;
end 
// key_in[ 32 ]
initial
begin
	key_in[32] = 1'b0;
end 
// key_in[ 31 ]
initial
begin
	key_in[31] = 1'b0;
end 
// key_in[ 30 ]
initial
begin
	key_in[30] = 1'b0;
end 
// key_in[ 29 ]
initial
begin
	key_in[29] = 1'b0;
end 
// key_in[ 28 ]
initial
begin
	key_in[28] = 1'b0;
end 
// key_in[ 27 ]
initial
begin
	key_in[27] = 1'b0;
end 
// key_in[ 26 ]
initial
begin
	key_in[26] = 1'b0;
end 
// key_in[ 25 ]
initial
begin
	key_in[25] = 1'b0;
end 
// key_in[ 24 ]
initial
begin
	key_in[24] = 1'b0;
end 
// key_in[ 23 ]
initial
begin
	key_in[23] = 1'b0;
end 
// key_in[ 22 ]
initial
begin
	key_in[22] = 1'b0;
end 
// key_in[ 21 ]
initial
begin
	key_in[21] = 1'b0;
end 
// key_in[ 20 ]
initial
begin
	key_in[20] = 1'b0;
end 
// key_in[ 19 ]
initial
begin
	key_in[19] = 1'b0;
end 
// key_in[ 18 ]
initial
begin
	key_in[18] = 1'b0;
end 
// key_in[ 17 ]
initial
begin
	key_in[17] = 1'b0;
end 
// key_in[ 16 ]
initial
begin
	key_in[16] = 1'b0;
end 
// key_in[ 15 ]
initial
begin
	key_in[15] = 1'b0;
end 
// key_in[ 14 ]
initial
begin
	key_in[14] = 1'b0;
end 
// key_in[ 13 ]
initial
begin
	key_in[13] = 1'b0;
end 
// key_in[ 12 ]
initial
begin
	key_in[12] = 1'b0;
end 
// key_in[ 11 ]
initial
begin
	key_in[11] = 1'b0;
end 
// key_in[ 10 ]
initial
begin
	key_in[10] = 1'b0;
end 
// key_in[ 9 ]
initial
begin
	key_in[9] = 1'b0;
end 
// key_in[ 8 ]
initial
begin
	key_in[8] = 1'b0;
end 
// key_in[ 7 ]
initial
begin
	key_in[7] = 1'b0;
end 
// key_in[ 6 ]
initial
begin
	key_in[6] = 1'b0;
end 
// key_in[ 5 ]
initial
begin
	key_in[5] = 1'b0;
end 
// key_in[ 4 ]
initial
begin
	key_in[4] = 1'b0;
end 
// key_in[ 3 ]
initial
begin
	key_in[3] = 1'b0;
end 
// key_in[ 2 ]
initial
begin
	key_in[2] = 1'b0;
end 
// key_in[ 1 ]
initial
begin
	key_in[1] = 1'b0;
end 
// key_in[ 0 ]
initial
begin
	key_in[0] = 1'b0;
end 

// wr_en
initial
begin
	wr_en = 1'b0;
	wr_en = #100000 1'b1;
	wr_en = #20000 1'b0;
	wr_en = #340000 1'b1;
	wr_en = #20000 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #460000 1'b1;
	data_in[1] = #20000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
	data_in[0] = #100000 1'b1;
	data_in[0] = #20000 1'b0;
	data_in[0] = #340000 1'b1;
	data_in[0] = #20000 1'b0;
end 

// next_replace_en
initial
begin
	next_replace_en = 1'b0;
	next_replace_en = #320000 1'b1;
	next_replace_en = #20000 1'b0;
end 
// next_replace_addr[ 4 ]
initial
begin
	next_replace_addr[4] = 1'b0;
end 
// next_replace_addr[ 3 ]
initial
begin
	next_replace_addr[3] = 1'b0;
end 
// next_replace_addr[ 2 ]
initial
begin
	next_replace_addr[2] = 1'b0;
end 
// next_replace_addr[ 1 ]
initial
begin
	next_replace_addr[1] = 1'b0;
end 
// next_replace_addr[ 0 ]
initial
begin
	next_replace_addr[0] = 1'b0;
end 

// overwrite_hit_en
initial
begin
	overwrite_hit_en = 1'b0;
end 
// overwrite_hit_bits[ 31 ]
initial
begin
	overwrite_hit_bits[31] = 1'b0;
end 
// overwrite_hit_bits[ 30 ]
initial
begin
	overwrite_hit_bits[30] = 1'b0;
end 
// overwrite_hit_bits[ 29 ]
initial
begin
	overwrite_hit_bits[29] = 1'b0;
end 
// overwrite_hit_bits[ 28 ]
initial
begin
	overwrite_hit_bits[28] = 1'b0;
end 
// overwrite_hit_bits[ 27 ]
initial
begin
	overwrite_hit_bits[27] = 1'b0;
end 
// overwrite_hit_bits[ 26 ]
initial
begin
	overwrite_hit_bits[26] = 1'b0;
end 
// overwrite_hit_bits[ 25 ]
initial
begin
	overwrite_hit_bits[25] = 1'b0;
end 
// overwrite_hit_bits[ 24 ]
initial
begin
	overwrite_hit_bits[24] = 1'b0;
end 
// overwrite_hit_bits[ 23 ]
initial
begin
	overwrite_hit_bits[23] = 1'b0;
end 
// overwrite_hit_bits[ 22 ]
initial
begin
	overwrite_hit_bits[22] = 1'b0;
end 
// overwrite_hit_bits[ 21 ]
initial
begin
	overwrite_hit_bits[21] = 1'b0;
end 
// overwrite_hit_bits[ 20 ]
initial
begin
	overwrite_hit_bits[20] = 1'b0;
end 
// overwrite_hit_bits[ 19 ]
initial
begin
	overwrite_hit_bits[19] = 1'b0;
end 
// overwrite_hit_bits[ 18 ]
initial
begin
	overwrite_hit_bits[18] = 1'b0;
end 
// overwrite_hit_bits[ 17 ]
initial
begin
	overwrite_hit_bits[17] = 1'b0;
end 
// overwrite_hit_bits[ 16 ]
initial
begin
	overwrite_hit_bits[16] = 1'b0;
end 
// overwrite_hit_bits[ 15 ]
initial
begin
	overwrite_hit_bits[15] = 1'b0;
end 
// overwrite_hit_bits[ 14 ]
initial
begin
	overwrite_hit_bits[14] = 1'b0;
end 
// overwrite_hit_bits[ 13 ]
initial
begin
	overwrite_hit_bits[13] = 1'b0;
end 
// overwrite_hit_bits[ 12 ]
initial
begin
	overwrite_hit_bits[12] = 1'b0;
end 
// overwrite_hit_bits[ 11 ]
initial
begin
	overwrite_hit_bits[11] = 1'b0;
end 
// overwrite_hit_bits[ 10 ]
initial
begin
	overwrite_hit_bits[10] = 1'b0;
end 
// overwrite_hit_bits[ 9 ]
initial
begin
	overwrite_hit_bits[9] = 1'b0;
end 
// overwrite_hit_bits[ 8 ]
initial
begin
	overwrite_hit_bits[8] = 1'b0;
end 
// overwrite_hit_bits[ 7 ]
initial
begin
	overwrite_hit_bits[7] = 1'b0;
end 
// overwrite_hit_bits[ 6 ]
initial
begin
	overwrite_hit_bits[6] = 1'b0;
end 
// overwrite_hit_bits[ 5 ]
initial
begin
	overwrite_hit_bits[5] = 1'b0;
end 
// overwrite_hit_bits[ 4 ]
initial
begin
	overwrite_hit_bits[4] = 1'b0;
end 
// overwrite_hit_bits[ 3 ]
initial
begin
	overwrite_hit_bits[3] = 1'b0;
end 
// overwrite_hit_bits[ 2 ]
initial
begin
	overwrite_hit_bits[2] = 1'b0;
end 
// overwrite_hit_bits[ 1 ]
initial
begin
	overwrite_hit_bits[1] = 1'b0;
end 
// overwrite_hit_bits[ 0 ]
initial
begin
	overwrite_hit_bits[0] = 1'b0;
end 

// overwrite_valid_en
initial
begin
	overwrite_valid_en = 1'b0;
end 
// overwrite_valid_bits[ 31 ]
initial
begin
	overwrite_valid_bits[31] = 1'b0;
end 
// overwrite_valid_bits[ 30 ]
initial
begin
	overwrite_valid_bits[30] = 1'b0;
end 
// overwrite_valid_bits[ 29 ]
initial
begin
	overwrite_valid_bits[29] = 1'b0;
end 
// overwrite_valid_bits[ 28 ]
initial
begin
	overwrite_valid_bits[28] = 1'b0;
end 
// overwrite_valid_bits[ 27 ]
initial
begin
	overwrite_valid_bits[27] = 1'b0;
end 
// overwrite_valid_bits[ 26 ]
initial
begin
	overwrite_valid_bits[26] = 1'b0;
end 
// overwrite_valid_bits[ 25 ]
initial
begin
	overwrite_valid_bits[25] = 1'b0;
end 
// overwrite_valid_bits[ 24 ]
initial
begin
	overwrite_valid_bits[24] = 1'b0;
end 
// overwrite_valid_bits[ 23 ]
initial
begin
	overwrite_valid_bits[23] = 1'b0;
end 
// overwrite_valid_bits[ 22 ]
initial
begin
	overwrite_valid_bits[22] = 1'b0;
end 
// overwrite_valid_bits[ 21 ]
initial
begin
	overwrite_valid_bits[21] = 1'b0;
end 
// overwrite_valid_bits[ 20 ]
initial
begin
	overwrite_valid_bits[20] = 1'b0;
end 
// overwrite_valid_bits[ 19 ]
initial
begin
	overwrite_valid_bits[19] = 1'b0;
end 
// overwrite_valid_bits[ 18 ]
initial
begin
	overwrite_valid_bits[18] = 1'b0;
end 
// overwrite_valid_bits[ 17 ]
initial
begin
	overwrite_valid_bits[17] = 1'b0;
end 
// overwrite_valid_bits[ 16 ]
initial
begin
	overwrite_valid_bits[16] = 1'b0;
end 
// overwrite_valid_bits[ 15 ]
initial
begin
	overwrite_valid_bits[15] = 1'b0;
end 
// overwrite_valid_bits[ 14 ]
initial
begin
	overwrite_valid_bits[14] = 1'b0;
end 
// overwrite_valid_bits[ 13 ]
initial
begin
	overwrite_valid_bits[13] = 1'b0;
end 
// overwrite_valid_bits[ 12 ]
initial
begin
	overwrite_valid_bits[12] = 1'b0;
end 
// overwrite_valid_bits[ 11 ]
initial
begin
	overwrite_valid_bits[11] = 1'b0;
end 
// overwrite_valid_bits[ 10 ]
initial
begin
	overwrite_valid_bits[10] = 1'b0;
end 
// overwrite_valid_bits[ 9 ]
initial
begin
	overwrite_valid_bits[9] = 1'b0;
end 
// overwrite_valid_bits[ 8 ]
initial
begin
	overwrite_valid_bits[8] = 1'b0;
end 
// overwrite_valid_bits[ 7 ]
initial
begin
	overwrite_valid_bits[7] = 1'b0;
end 
// overwrite_valid_bits[ 6 ]
initial
begin
	overwrite_valid_bits[6] = 1'b0;
end 
// overwrite_valid_bits[ 5 ]
initial
begin
	overwrite_valid_bits[5] = 1'b0;
end 
// overwrite_valid_bits[ 4 ]
initial
begin
	overwrite_valid_bits[4] = 1'b0;
end 
// overwrite_valid_bits[ 3 ]
initial
begin
	overwrite_valid_bits[3] = 1'b0;
end 
// overwrite_valid_bits[ 2 ]
initial
begin
	overwrite_valid_bits[2] = 1'b0;
end 
// overwrite_valid_bits[ 1 ]
initial
begin
	overwrite_valid_bits[1] = 1'b0;
end 
// overwrite_valid_bits[ 0 ]
initial
begin
	overwrite_valid_bits[0] = 1'b0;
end 
endmodule

