// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2017 19:56:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          write_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module write_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [1:0] data_in;
reg [47:0] key_in;
reg reset;
reg start;
// wires                                               
wire [1:0] data_out;
wire done;
wire [47:0] key_out;
wire write_en;

// assign statements (if any)                          
write_fsm i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_in(data_in),
	.data_out(data_out),
	.done(done),
	.key_in(key_in),
	.key_out(key_out),
	.reset(reset),
	.start(start),
	.write_en(write_en)
);
initial 
begin 
#160000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #40000 1'b0;
end 
// key_in[ 47 ]
initial
begin
	key_in[47] = 1'b0;
	key_in[47] = #60000 1'b1;
	key_in[47] = #20000 1'b0;
end 
// key_in[ 46 ]
initial
begin
	key_in[46] = 1'b0;
end 
// key_in[ 45 ]
initial
begin
	key_in[45] = 1'b0;
	key_in[45] = #60000 1'b1;
	key_in[45] = #20000 1'b0;
end 
// key_in[ 44 ]
initial
begin
	key_in[44] = 1'b0;
end 
// key_in[ 43 ]
initial
begin
	key_in[43] = 1'b0;
	key_in[43] = #60000 1'b1;
	key_in[43] = #20000 1'b0;
end 
// key_in[ 42 ]
initial
begin
	key_in[42] = 1'b0;
end 
// key_in[ 41 ]
initial
begin
	key_in[41] = 1'b0;
	key_in[41] = #60000 1'b1;
	key_in[41] = #20000 1'b0;
end 
// key_in[ 40 ]
initial
begin
	key_in[40] = 1'b0;
end 
// key_in[ 39 ]
initial
begin
	key_in[39] = 1'b0;
	key_in[39] = #60000 1'b1;
	key_in[39] = #20000 1'b0;
end 
// key_in[ 38 ]
initial
begin
	key_in[38] = 1'b0;
end 
// key_in[ 37 ]
initial
begin
	key_in[37] = 1'b0;
	key_in[37] = #60000 1'b1;
	key_in[37] = #20000 1'b0;
end 
// key_in[ 36 ]
initial
begin
	key_in[36] = 1'b0;
end 
// key_in[ 35 ]
initial
begin
	key_in[35] = 1'b0;
	key_in[35] = #60000 1'b1;
	key_in[35] = #20000 1'b0;
end 
// key_in[ 34 ]
initial
begin
	key_in[34] = 1'b0;
end 
// key_in[ 33 ]
initial
begin
	key_in[33] = 1'b0;
	key_in[33] = #60000 1'b1;
	key_in[33] = #20000 1'b0;
end 
// key_in[ 32 ]
initial
begin
	key_in[32] = 1'b0;
end 
// key_in[ 31 ]
initial
begin
	key_in[31] = 1'b0;
	key_in[31] = #60000 1'b1;
	key_in[31] = #20000 1'b0;
end 
// key_in[ 30 ]
initial
begin
	key_in[30] = 1'b0;
end 
// key_in[ 29 ]
initial
begin
	key_in[29] = 1'b0;
	key_in[29] = #60000 1'b1;
	key_in[29] = #20000 1'b0;
end 
// key_in[ 28 ]
initial
begin
	key_in[28] = 1'b0;
end 
// key_in[ 27 ]
initial
begin
	key_in[27] = 1'b0;
	key_in[27] = #60000 1'b1;
	key_in[27] = #20000 1'b0;
end 
// key_in[ 26 ]
initial
begin
	key_in[26] = 1'b0;
end 
// key_in[ 25 ]
initial
begin
	key_in[25] = 1'b0;
	key_in[25] = #60000 1'b1;
	key_in[25] = #20000 1'b0;
end 
// key_in[ 24 ]
initial
begin
	key_in[24] = 1'b0;
end 
// key_in[ 23 ]
initial
begin
	key_in[23] = 1'b0;
	key_in[23] = #60000 1'b1;
	key_in[23] = #20000 1'b0;
end 
// key_in[ 22 ]
initial
begin
	key_in[22] = 1'b0;
end 
// key_in[ 21 ]
initial
begin
	key_in[21] = 1'b0;
	key_in[21] = #60000 1'b1;
	key_in[21] = #20000 1'b0;
end 
// key_in[ 20 ]
initial
begin
	key_in[20] = 1'b0;
end 
// key_in[ 19 ]
initial
begin
	key_in[19] = 1'b0;
	key_in[19] = #60000 1'b1;
	key_in[19] = #20000 1'b0;
end 
// key_in[ 18 ]
initial
begin
	key_in[18] = 1'b0;
end 
// key_in[ 17 ]
initial
begin
	key_in[17] = 1'b0;
	key_in[17] = #60000 1'b1;
	key_in[17] = #20000 1'b0;
end 
// key_in[ 16 ]
initial
begin
	key_in[16] = 1'b0;
end 
// key_in[ 15 ]
initial
begin
	key_in[15] = 1'b0;
	key_in[15] = #60000 1'b1;
	key_in[15] = #20000 1'b0;
end 
// key_in[ 14 ]
initial
begin
	key_in[14] = 1'b0;
end 
// key_in[ 13 ]
initial
begin
	key_in[13] = 1'b0;
	key_in[13] = #60000 1'b1;
	key_in[13] = #20000 1'b0;
end 
// key_in[ 12 ]
initial
begin
	key_in[12] = 1'b0;
end 
// key_in[ 11 ]
initial
begin
	key_in[11] = 1'b0;
	key_in[11] = #60000 1'b1;
	key_in[11] = #20000 1'b0;
end 
// key_in[ 10 ]
initial
begin
	key_in[10] = 1'b0;
end 
// key_in[ 9 ]
initial
begin
	key_in[9] = 1'b0;
	key_in[9] = #60000 1'b1;
	key_in[9] = #20000 1'b0;
end 
// key_in[ 8 ]
initial
begin
	key_in[8] = 1'b0;
end 
// key_in[ 7 ]
initial
begin
	key_in[7] = 1'b0;
	key_in[7] = #60000 1'b1;
	key_in[7] = #20000 1'b0;
end 
// key_in[ 6 ]
initial
begin
	key_in[6] = 1'b0;
end 
// key_in[ 5 ]
initial
begin
	key_in[5] = 1'b0;
	key_in[5] = #60000 1'b1;
	key_in[5] = #20000 1'b0;
end 
// key_in[ 4 ]
initial
begin
	key_in[4] = 1'b0;
end 
// key_in[ 3 ]
initial
begin
	key_in[3] = 1'b0;
	key_in[3] = #60000 1'b1;
	key_in[3] = #20000 1'b0;
end 
// key_in[ 2 ]
initial
begin
	key_in[2] = 1'b0;
end 
// key_in[ 1 ]
initial
begin
	key_in[1] = 1'b0;
	key_in[1] = #60000 1'b1;
	key_in[1] = #20000 1'b0;
end 
// key_in[ 0 ]
initial
begin
	key_in[0] = 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #60000 1'b1;
	data_in[1] = #20000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
	data_in[0] = #60000 1'b1;
	data_in[0] = #20000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #60000 1'b1;
	start = #20000 1'b0;
end 
endmodule

