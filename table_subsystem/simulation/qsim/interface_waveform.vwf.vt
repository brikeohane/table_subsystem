// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/02/2017 00:05:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          table_interface
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module table_interface_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg ctrl_aging_done;
reg ctrl_DA_done;
reg ctrl_DA_hit;
reg [1:0] ctrl_DA_port;
reg ctrl_SA_done;
reg [47:0] fwd_DA;
reg [1:0] fwd_port_in;
reg [47:0] fwd_SA;
reg fwd_start;
reg reset;
// wires                                               
wire ctrl_aging_start;
wire [47:0] ctrl_DA;
wire ctrl_DA_start;
wire [47:0] ctrl_SA;
wire [1:0] ctrl_SA_port;
wire ctrl_SA_start;
wire fwd_broadcast;
wire fwd_done;
wire [1:0] fwd_port_out;

// assign statements (if any)                          
table_interface i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.ctrl_aging_done(ctrl_aging_done),
	.ctrl_aging_start(ctrl_aging_start),
	.ctrl_DA(ctrl_DA),
	.ctrl_DA_done(ctrl_DA_done),
	.ctrl_DA_hit(ctrl_DA_hit),
	.ctrl_DA_port(ctrl_DA_port),
	.ctrl_DA_start(ctrl_DA_start),
	.ctrl_SA(ctrl_SA),
	.ctrl_SA_done(ctrl_SA_done),
	.ctrl_SA_port(ctrl_SA_port),
	.ctrl_SA_start(ctrl_SA_start),
	.fwd_broadcast(fwd_broadcast),
	.fwd_DA(fwd_DA),
	.fwd_done(fwd_done),
	.fwd_port_in(fwd_port_in),
	.fwd_port_out(fwd_port_out),
	.fwd_SA(fwd_SA),
	.fwd_start(fwd_start),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #60000 1'b0;
end 

// fwd_start
initial
begin
	fwd_start = 1'b0;
	fwd_start = #140000 1'b1;
	fwd_start = #20000 1'b0;
end 
// fwd_DA[ 47 ]
initial
begin
	fwd_DA[47] = 1'b1;
end 
// fwd_DA[ 46 ]
initial
begin
	fwd_DA[46] = 1'b0;
	fwd_DA[46] = #120000 1'b1;
	fwd_DA[46] = #140000 1'b0;
	fwd_DA[46] = #110000 1'b1;
	fwd_DA[46] = #130000 1'b0;
end 
// fwd_DA[ 45 ]
initial
begin
	fwd_DA[45] = 1'b1;
end 
// fwd_DA[ 44 ]
initial
begin
	fwd_DA[44] = 1'b0;
	fwd_DA[44] = #120000 1'b1;
	fwd_DA[44] = #140000 1'b0;
	fwd_DA[44] = #110000 1'b1;
	fwd_DA[44] = #130000 1'b0;
end 
// fwd_DA[ 43 ]
initial
begin
	fwd_DA[43] = 1'b1;
end 
// fwd_DA[ 42 ]
initial
begin
	fwd_DA[42] = 1'b0;
	fwd_DA[42] = #120000 1'b1;
	fwd_DA[42] = #140000 1'b0;
	fwd_DA[42] = #110000 1'b1;
	fwd_DA[42] = #130000 1'b0;
end 
// fwd_DA[ 41 ]
initial
begin
	fwd_DA[41] = 1'b1;
end 
// fwd_DA[ 40 ]
initial
begin
	fwd_DA[40] = 1'b0;
	fwd_DA[40] = #120000 1'b1;
	fwd_DA[40] = #140000 1'b0;
	fwd_DA[40] = #110000 1'b1;
	fwd_DA[40] = #130000 1'b0;
end 
// fwd_DA[ 39 ]
initial
begin
	fwd_DA[39] = 1'b1;
end 
// fwd_DA[ 38 ]
initial
begin
	fwd_DA[38] = 1'b0;
	fwd_DA[38] = #120000 1'b1;
	fwd_DA[38] = #140000 1'b0;
	fwd_DA[38] = #110000 1'b1;
	fwd_DA[38] = #130000 1'b0;
end 
// fwd_DA[ 37 ]
initial
begin
	fwd_DA[37] = 1'b1;
end 
// fwd_DA[ 36 ]
initial
begin
	fwd_DA[36] = 1'b0;
	fwd_DA[36] = #120000 1'b1;
	fwd_DA[36] = #140000 1'b0;
	fwd_DA[36] = #110000 1'b1;
	fwd_DA[36] = #130000 1'b0;
end 
// fwd_DA[ 35 ]
initial
begin
	fwd_DA[35] = 1'b1;
end 
// fwd_DA[ 34 ]
initial
begin
	fwd_DA[34] = 1'b0;
	fwd_DA[34] = #120000 1'b1;
	fwd_DA[34] = #140000 1'b0;
	fwd_DA[34] = #110000 1'b1;
	fwd_DA[34] = #130000 1'b0;
end 
// fwd_DA[ 33 ]
initial
begin
	fwd_DA[33] = 1'b1;
end 
// fwd_DA[ 32 ]
initial
begin
	fwd_DA[32] = 1'b0;
	fwd_DA[32] = #120000 1'b1;
	fwd_DA[32] = #140000 1'b0;
	fwd_DA[32] = #110000 1'b1;
	fwd_DA[32] = #130000 1'b0;
end 
// fwd_DA[ 31 ]
initial
begin
	fwd_DA[31] = 1'b1;
end 
// fwd_DA[ 30 ]
initial
begin
	fwd_DA[30] = 1'b0;
	fwd_DA[30] = #120000 1'b1;
	fwd_DA[30] = #140000 1'b0;
	fwd_DA[30] = #110000 1'b1;
	fwd_DA[30] = #130000 1'b0;
end 
// fwd_DA[ 29 ]
initial
begin
	fwd_DA[29] = 1'b1;
end 
// fwd_DA[ 28 ]
initial
begin
	fwd_DA[28] = 1'b0;
	fwd_DA[28] = #120000 1'b1;
	fwd_DA[28] = #140000 1'b0;
	fwd_DA[28] = #110000 1'b1;
	fwd_DA[28] = #130000 1'b0;
end 
// fwd_DA[ 27 ]
initial
begin
	fwd_DA[27] = 1'b1;
end 
// fwd_DA[ 26 ]
initial
begin
	fwd_DA[26] = 1'b0;
	fwd_DA[26] = #120000 1'b1;
	fwd_DA[26] = #140000 1'b0;
	fwd_DA[26] = #110000 1'b1;
	fwd_DA[26] = #130000 1'b0;
end 
// fwd_DA[ 25 ]
initial
begin
	fwd_DA[25] = 1'b1;
end 
// fwd_DA[ 24 ]
initial
begin
	fwd_DA[24] = 1'b0;
	fwd_DA[24] = #120000 1'b1;
	fwd_DA[24] = #140000 1'b0;
	fwd_DA[24] = #110000 1'b1;
	fwd_DA[24] = #130000 1'b0;
end 
// fwd_DA[ 23 ]
initial
begin
	fwd_DA[23] = 1'b1;
end 
// fwd_DA[ 22 ]
initial
begin
	fwd_DA[22] = 1'b0;
	fwd_DA[22] = #120000 1'b1;
	fwd_DA[22] = #140000 1'b0;
	fwd_DA[22] = #110000 1'b1;
	fwd_DA[22] = #130000 1'b0;
end 
// fwd_DA[ 21 ]
initial
begin
	fwd_DA[21] = 1'b1;
end 
// fwd_DA[ 20 ]
initial
begin
	fwd_DA[20] = 1'b0;
	fwd_DA[20] = #120000 1'b1;
	fwd_DA[20] = #140000 1'b0;
	fwd_DA[20] = #110000 1'b1;
	fwd_DA[20] = #130000 1'b0;
end 
// fwd_DA[ 19 ]
initial
begin
	fwd_DA[19] = 1'b1;
end 
// fwd_DA[ 18 ]
initial
begin
	fwd_DA[18] = 1'b0;
	fwd_DA[18] = #120000 1'b1;
	fwd_DA[18] = #140000 1'b0;
	fwd_DA[18] = #110000 1'b1;
	fwd_DA[18] = #130000 1'b0;
end 
// fwd_DA[ 17 ]
initial
begin
	fwd_DA[17] = 1'b1;
end 
// fwd_DA[ 16 ]
initial
begin
	fwd_DA[16] = 1'b0;
	fwd_DA[16] = #120000 1'b1;
	fwd_DA[16] = #140000 1'b0;
	fwd_DA[16] = #110000 1'b1;
	fwd_DA[16] = #130000 1'b0;
end 
// fwd_DA[ 15 ]
initial
begin
	fwd_DA[15] = 1'b1;
end 
// fwd_DA[ 14 ]
initial
begin
	fwd_DA[14] = 1'b0;
	fwd_DA[14] = #120000 1'b1;
	fwd_DA[14] = #140000 1'b0;
	fwd_DA[14] = #110000 1'b1;
	fwd_DA[14] = #130000 1'b0;
end 
// fwd_DA[ 13 ]
initial
begin
	fwd_DA[13] = 1'b1;
end 
// fwd_DA[ 12 ]
initial
begin
	fwd_DA[12] = 1'b0;
	fwd_DA[12] = #120000 1'b1;
	fwd_DA[12] = #140000 1'b0;
	fwd_DA[12] = #110000 1'b1;
	fwd_DA[12] = #130000 1'b0;
end 
// fwd_DA[ 11 ]
initial
begin
	fwd_DA[11] = 1'b1;
end 
// fwd_DA[ 10 ]
initial
begin
	fwd_DA[10] = 1'b0;
	fwd_DA[10] = #120000 1'b1;
	fwd_DA[10] = #140000 1'b0;
	fwd_DA[10] = #110000 1'b1;
	fwd_DA[10] = #130000 1'b0;
end 
// fwd_DA[ 9 ]
initial
begin
	fwd_DA[9] = 1'b1;
end 
// fwd_DA[ 8 ]
initial
begin
	fwd_DA[8] = 1'b0;
	fwd_DA[8] = #120000 1'b1;
	fwd_DA[8] = #140000 1'b0;
	fwd_DA[8] = #110000 1'b1;
	fwd_DA[8] = #130000 1'b0;
end 
// fwd_DA[ 7 ]
initial
begin
	fwd_DA[7] = 1'b1;
end 
// fwd_DA[ 6 ]
initial
begin
	fwd_DA[6] = 1'b0;
	fwd_DA[6] = #120000 1'b1;
	fwd_DA[6] = #140000 1'b0;
	fwd_DA[6] = #110000 1'b1;
	fwd_DA[6] = #130000 1'b0;
end 
// fwd_DA[ 5 ]
initial
begin
	fwd_DA[5] = 1'b1;
end 
// fwd_DA[ 4 ]
initial
begin
	fwd_DA[4] = 1'b0;
	fwd_DA[4] = #120000 1'b1;
	fwd_DA[4] = #140000 1'b0;
	fwd_DA[4] = #110000 1'b1;
	fwd_DA[4] = #130000 1'b0;
end 
// fwd_DA[ 3 ]
initial
begin
	fwd_DA[3] = 1'b1;
end 
// fwd_DA[ 2 ]
initial
begin
	fwd_DA[2] = 1'b0;
	fwd_DA[2] = #120000 1'b1;
	fwd_DA[2] = #140000 1'b0;
	fwd_DA[2] = #110000 1'b1;
	fwd_DA[2] = #130000 1'b0;
end 
// fwd_DA[ 1 ]
initial
begin
	fwd_DA[1] = 1'b1;
end 
// fwd_DA[ 0 ]
initial
begin
	fwd_DA[0] = 1'b0;
	fwd_DA[0] = #120000 1'b1;
	fwd_DA[0] = #140000 1'b0;
	fwd_DA[0] = #110000 1'b1;
	fwd_DA[0] = #130000 1'b0;
end 
// fwd_SA[ 47 ]
initial
begin
	fwd_SA[47] = 1'b1;
end 
// fwd_SA[ 46 ]
initial
begin
	fwd_SA[46] = 1'b1;
	fwd_SA[46] = #120000 1'b0;
	fwd_SA[46] = #140000 1'b1;
	fwd_SA[46] = #110000 1'b0;
	fwd_SA[46] = #130000 1'b1;
end 
// fwd_SA[ 45 ]
initial
begin
	fwd_SA[45] = 1'b1;
end 
// fwd_SA[ 44 ]
initial
begin
	fwd_SA[44] = 1'b1;
	fwd_SA[44] = #120000 1'b0;
	fwd_SA[44] = #140000 1'b1;
	fwd_SA[44] = #110000 1'b0;
	fwd_SA[44] = #130000 1'b1;
end 
// fwd_SA[ 43 ]
initial
begin
	fwd_SA[43] = 1'b1;
end 
// fwd_SA[ 42 ]
initial
begin
	fwd_SA[42] = 1'b1;
	fwd_SA[42] = #120000 1'b0;
	fwd_SA[42] = #140000 1'b1;
	fwd_SA[42] = #110000 1'b0;
	fwd_SA[42] = #130000 1'b1;
end 
// fwd_SA[ 41 ]
initial
begin
	fwd_SA[41] = 1'b1;
end 
// fwd_SA[ 40 ]
initial
begin
	fwd_SA[40] = 1'b1;
	fwd_SA[40] = #120000 1'b0;
	fwd_SA[40] = #140000 1'b1;
	fwd_SA[40] = #110000 1'b0;
	fwd_SA[40] = #130000 1'b1;
end 
// fwd_SA[ 39 ]
initial
begin
	fwd_SA[39] = 1'b1;
end 
// fwd_SA[ 38 ]
initial
begin
	fwd_SA[38] = 1'b1;
	fwd_SA[38] = #120000 1'b0;
	fwd_SA[38] = #140000 1'b1;
	fwd_SA[38] = #110000 1'b0;
	fwd_SA[38] = #130000 1'b1;
end 
// fwd_SA[ 37 ]
initial
begin
	fwd_SA[37] = 1'b1;
end 
// fwd_SA[ 36 ]
initial
begin
	fwd_SA[36] = 1'b1;
	fwd_SA[36] = #120000 1'b0;
	fwd_SA[36] = #140000 1'b1;
	fwd_SA[36] = #110000 1'b0;
	fwd_SA[36] = #130000 1'b1;
end 
// fwd_SA[ 35 ]
initial
begin
	fwd_SA[35] = 1'b1;
end 
// fwd_SA[ 34 ]
initial
begin
	fwd_SA[34] = 1'b1;
	fwd_SA[34] = #120000 1'b0;
	fwd_SA[34] = #140000 1'b1;
	fwd_SA[34] = #110000 1'b0;
	fwd_SA[34] = #130000 1'b1;
end 
// fwd_SA[ 33 ]
initial
begin
	fwd_SA[33] = 1'b1;
end 
// fwd_SA[ 32 ]
initial
begin
	fwd_SA[32] = 1'b1;
	fwd_SA[32] = #120000 1'b0;
	fwd_SA[32] = #140000 1'b1;
	fwd_SA[32] = #110000 1'b0;
	fwd_SA[32] = #130000 1'b1;
end 
// fwd_SA[ 31 ]
initial
begin
	fwd_SA[31] = 1'b1;
end 
// fwd_SA[ 30 ]
initial
begin
	fwd_SA[30] = 1'b1;
	fwd_SA[30] = #120000 1'b0;
	fwd_SA[30] = #140000 1'b1;
	fwd_SA[30] = #110000 1'b0;
	fwd_SA[30] = #130000 1'b1;
end 
// fwd_SA[ 29 ]
initial
begin
	fwd_SA[29] = 1'b1;
end 
// fwd_SA[ 28 ]
initial
begin
	fwd_SA[28] = 1'b1;
	fwd_SA[28] = #120000 1'b0;
	fwd_SA[28] = #140000 1'b1;
	fwd_SA[28] = #110000 1'b0;
	fwd_SA[28] = #130000 1'b1;
end 
// fwd_SA[ 27 ]
initial
begin
	fwd_SA[27] = 1'b1;
end 
// fwd_SA[ 26 ]
initial
begin
	fwd_SA[26] = 1'b1;
	fwd_SA[26] = #120000 1'b0;
	fwd_SA[26] = #140000 1'b1;
	fwd_SA[26] = #110000 1'b0;
	fwd_SA[26] = #130000 1'b1;
end 
// fwd_SA[ 25 ]
initial
begin
	fwd_SA[25] = 1'b1;
end 
// fwd_SA[ 24 ]
initial
begin
	fwd_SA[24] = 1'b1;
	fwd_SA[24] = #120000 1'b0;
	fwd_SA[24] = #140000 1'b1;
	fwd_SA[24] = #110000 1'b0;
	fwd_SA[24] = #130000 1'b1;
end 
// fwd_SA[ 23 ]
initial
begin
	fwd_SA[23] = 1'b1;
end 
// fwd_SA[ 22 ]
initial
begin
	fwd_SA[22] = 1'b1;
	fwd_SA[22] = #120000 1'b0;
	fwd_SA[22] = #140000 1'b1;
	fwd_SA[22] = #110000 1'b0;
	fwd_SA[22] = #130000 1'b1;
end 
// fwd_SA[ 21 ]
initial
begin
	fwd_SA[21] = 1'b1;
end 
// fwd_SA[ 20 ]
initial
begin
	fwd_SA[20] = 1'b1;
	fwd_SA[20] = #120000 1'b0;
	fwd_SA[20] = #140000 1'b1;
	fwd_SA[20] = #110000 1'b0;
	fwd_SA[20] = #130000 1'b1;
end 
// fwd_SA[ 19 ]
initial
begin
	fwd_SA[19] = 1'b1;
end 
// fwd_SA[ 18 ]
initial
begin
	fwd_SA[18] = 1'b1;
	fwd_SA[18] = #120000 1'b0;
	fwd_SA[18] = #140000 1'b1;
	fwd_SA[18] = #110000 1'b0;
	fwd_SA[18] = #130000 1'b1;
end 
// fwd_SA[ 17 ]
initial
begin
	fwd_SA[17] = 1'b1;
end 
// fwd_SA[ 16 ]
initial
begin
	fwd_SA[16] = 1'b1;
	fwd_SA[16] = #120000 1'b0;
	fwd_SA[16] = #140000 1'b1;
	fwd_SA[16] = #110000 1'b0;
	fwd_SA[16] = #130000 1'b1;
end 
// fwd_SA[ 15 ]
initial
begin
	fwd_SA[15] = 1'b1;
end 
// fwd_SA[ 14 ]
initial
begin
	fwd_SA[14] = 1'b1;
	fwd_SA[14] = #120000 1'b0;
	fwd_SA[14] = #140000 1'b1;
	fwd_SA[14] = #110000 1'b0;
	fwd_SA[14] = #130000 1'b1;
end 
// fwd_SA[ 13 ]
initial
begin
	fwd_SA[13] = 1'b1;
end 
// fwd_SA[ 12 ]
initial
begin
	fwd_SA[12] = 1'b1;
	fwd_SA[12] = #120000 1'b0;
	fwd_SA[12] = #140000 1'b1;
	fwd_SA[12] = #110000 1'b0;
	fwd_SA[12] = #130000 1'b1;
end 
// fwd_SA[ 11 ]
initial
begin
	fwd_SA[11] = 1'b1;
end 
// fwd_SA[ 10 ]
initial
begin
	fwd_SA[10] = 1'b1;
	fwd_SA[10] = #120000 1'b0;
	fwd_SA[10] = #140000 1'b1;
	fwd_SA[10] = #110000 1'b0;
	fwd_SA[10] = #130000 1'b1;
end 
// fwd_SA[ 9 ]
initial
begin
	fwd_SA[9] = 1'b1;
end 
// fwd_SA[ 8 ]
initial
begin
	fwd_SA[8] = 1'b1;
	fwd_SA[8] = #120000 1'b0;
	fwd_SA[8] = #140000 1'b1;
	fwd_SA[8] = #110000 1'b0;
	fwd_SA[8] = #130000 1'b1;
end 
// fwd_SA[ 7 ]
initial
begin
	fwd_SA[7] = 1'b1;
end 
// fwd_SA[ 6 ]
initial
begin
	fwd_SA[6] = 1'b1;
	fwd_SA[6] = #120000 1'b0;
	fwd_SA[6] = #140000 1'b1;
	fwd_SA[6] = #110000 1'b0;
	fwd_SA[6] = #130000 1'b1;
end 
// fwd_SA[ 5 ]
initial
begin
	fwd_SA[5] = 1'b1;
end 
// fwd_SA[ 4 ]
initial
begin
	fwd_SA[4] = 1'b1;
	fwd_SA[4] = #120000 1'b0;
	fwd_SA[4] = #140000 1'b1;
	fwd_SA[4] = #110000 1'b0;
	fwd_SA[4] = #130000 1'b1;
end 
// fwd_SA[ 3 ]
initial
begin
	fwd_SA[3] = 1'b1;
end 
// fwd_SA[ 2 ]
initial
begin
	fwd_SA[2] = 1'b1;
	fwd_SA[2] = #120000 1'b0;
	fwd_SA[2] = #140000 1'b1;
	fwd_SA[2] = #110000 1'b0;
	fwd_SA[2] = #130000 1'b1;
end 
// fwd_SA[ 1 ]
initial
begin
	fwd_SA[1] = 1'b1;
end 
// fwd_SA[ 0 ]
initial
begin
	fwd_SA[0] = 1'b1;
	fwd_SA[0] = #120000 1'b0;
	fwd_SA[0] = #140000 1'b1;
	fwd_SA[0] = #110000 1'b0;
	fwd_SA[0] = #130000 1'b1;
end 
// fwd_port_in[ 1 ]
initial
begin
	fwd_port_in[1] = 1'b1;
	fwd_port_in[1] = #120000 1'b0;
	fwd_port_in[1] = #140000 1'b1;
	fwd_port_in[1] = #110000 1'b0;
	fwd_port_in[1] = #130000 1'b1;
end 
// fwd_port_in[ 0 ]
initial
begin
	fwd_port_in[0] = 1'b1;
end 

// ctrl_aging_done
initial
begin
	ctrl_aging_done = 1'b0;
end 

// ctrl_DA_done
initial
begin
	ctrl_DA_done = 1'b0;
end 

// ctrl_DA_hit
initial
begin
	ctrl_DA_hit = 1'b0;
end 
// ctrl_DA_port[ 1 ]
initial
begin
	ctrl_DA_port[1] = 1'b0;
end 
// ctrl_DA_port[ 0 ]
initial
begin
	ctrl_DA_port[0] = 1'b0;
end 

// ctrl_SA_done
initial
begin
	ctrl_SA_done = 1'b0;
end 
endmodule

