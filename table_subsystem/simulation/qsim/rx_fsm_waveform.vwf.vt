// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2017 20:37:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          rx_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rx_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg aging_done;
reg clk;
reg DA_done;
reg [47:0] DA_in;
reg [1:0] port_in;
reg reset;
reg SA_done;
reg [47:0] SA_in;
reg start;
// wires                                               
wire aging_start;
wire [47:0] DA_out;
wire DA_start;
wire [1:0] port_out;
wire [47:0] SA_out;
wire SA_start;

// assign statements (if any)                          
rx_fsm i1 (
// port map - connection between master ports and signals/registers   
	.aging_done(aging_done),
	.aging_start(aging_start),
	.clk(clk),
	.DA_done(DA_done),
	.DA_in(DA_in),
	.DA_out(DA_out),
	.DA_start(DA_start),
	.port_in(port_in),
	.port_out(port_out),
	.reset(reset),
	.SA_done(SA_done),
	.SA_in(SA_in),
	.SA_out(SA_out),
	.SA_start(SA_start),
	.start(start)
);
initial 
begin 
#300000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #40000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #60000 1'b1;
	start = #20000 1'b0;
	start = #150000 1'b1;
	start = #20000 1'b0;
end 
// DA_in[ 47 ]
initial
begin
	DA_in[47] = 1'b0;
	DA_in[47] = #60000 1'b1;
	DA_in[47] = #20000 1'b0;
	DA_in[47] = #150000 1'b1;
	DA_in[47] = #20000 1'b0;
end 
// DA_in[ 46 ]
initial
begin
	DA_in[46] = 1'b0;
	DA_in[46] = #230000 1'b1;
	DA_in[46] = #20000 1'b0;
end 
// DA_in[ 45 ]
initial
begin
	DA_in[45] = 1'b0;
	DA_in[45] = #60000 1'b1;
	DA_in[45] = #20000 1'b0;
end 
// DA_in[ 44 ]
initial
begin
	DA_in[44] = 1'b0;
end 
// DA_in[ 43 ]
initial
begin
	DA_in[43] = 1'b0;
	DA_in[43] = #60000 1'b1;
	DA_in[43] = #20000 1'b0;
	DA_in[43] = #150000 1'b1;
	DA_in[43] = #20000 1'b0;
end 
// DA_in[ 42 ]
initial
begin
	DA_in[42] = 1'b0;
	DA_in[42] = #230000 1'b1;
	DA_in[42] = #20000 1'b0;
end 
// DA_in[ 41 ]
initial
begin
	DA_in[41] = 1'b0;
	DA_in[41] = #60000 1'b1;
	DA_in[41] = #20000 1'b0;
end 
// DA_in[ 40 ]
initial
begin
	DA_in[40] = 1'b0;
end 
// DA_in[ 39 ]
initial
begin
	DA_in[39] = 1'b0;
	DA_in[39] = #60000 1'b1;
	DA_in[39] = #20000 1'b0;
	DA_in[39] = #150000 1'b1;
	DA_in[39] = #20000 1'b0;
end 
// DA_in[ 38 ]
initial
begin
	DA_in[38] = 1'b0;
	DA_in[38] = #230000 1'b1;
	DA_in[38] = #20000 1'b0;
end 
// DA_in[ 37 ]
initial
begin
	DA_in[37] = 1'b0;
	DA_in[37] = #60000 1'b1;
	DA_in[37] = #20000 1'b0;
end 
// DA_in[ 36 ]
initial
begin
	DA_in[36] = 1'b0;
end 
// DA_in[ 35 ]
initial
begin
	DA_in[35] = 1'b0;
	DA_in[35] = #60000 1'b1;
	DA_in[35] = #20000 1'b0;
	DA_in[35] = #150000 1'b1;
	DA_in[35] = #20000 1'b0;
end 
// DA_in[ 34 ]
initial
begin
	DA_in[34] = 1'b0;
	DA_in[34] = #230000 1'b1;
	DA_in[34] = #20000 1'b0;
end 
// DA_in[ 33 ]
initial
begin
	DA_in[33] = 1'b0;
	DA_in[33] = #60000 1'b1;
	DA_in[33] = #20000 1'b0;
end 
// DA_in[ 32 ]
initial
begin
	DA_in[32] = 1'b0;
end 
// DA_in[ 31 ]
initial
begin
	DA_in[31] = 1'b0;
	DA_in[31] = #60000 1'b1;
	DA_in[31] = #20000 1'b0;
	DA_in[31] = #150000 1'b1;
	DA_in[31] = #20000 1'b0;
end 
// DA_in[ 30 ]
initial
begin
	DA_in[30] = 1'b0;
	DA_in[30] = #230000 1'b1;
	DA_in[30] = #20000 1'b0;
end 
// DA_in[ 29 ]
initial
begin
	DA_in[29] = 1'b0;
	DA_in[29] = #60000 1'b1;
	DA_in[29] = #20000 1'b0;
end 
// DA_in[ 28 ]
initial
begin
	DA_in[28] = 1'b0;
end 
// DA_in[ 27 ]
initial
begin
	DA_in[27] = 1'b0;
	DA_in[27] = #60000 1'b1;
	DA_in[27] = #20000 1'b0;
	DA_in[27] = #150000 1'b1;
	DA_in[27] = #20000 1'b0;
end 
// DA_in[ 26 ]
initial
begin
	DA_in[26] = 1'b0;
	DA_in[26] = #230000 1'b1;
	DA_in[26] = #20000 1'b0;
end 
// DA_in[ 25 ]
initial
begin
	DA_in[25] = 1'b0;
	DA_in[25] = #60000 1'b1;
	DA_in[25] = #20000 1'b0;
end 
// DA_in[ 24 ]
initial
begin
	DA_in[24] = 1'b0;
end 
// DA_in[ 23 ]
initial
begin
	DA_in[23] = 1'b0;
	DA_in[23] = #60000 1'b1;
	DA_in[23] = #20000 1'b0;
	DA_in[23] = #150000 1'b1;
	DA_in[23] = #20000 1'b0;
end 
// DA_in[ 22 ]
initial
begin
	DA_in[22] = 1'b0;
	DA_in[22] = #230000 1'b1;
	DA_in[22] = #20000 1'b0;
end 
// DA_in[ 21 ]
initial
begin
	DA_in[21] = 1'b0;
	DA_in[21] = #60000 1'b1;
	DA_in[21] = #20000 1'b0;
end 
// DA_in[ 20 ]
initial
begin
	DA_in[20] = 1'b0;
end 
// DA_in[ 19 ]
initial
begin
	DA_in[19] = 1'b0;
	DA_in[19] = #60000 1'b1;
	DA_in[19] = #20000 1'b0;
	DA_in[19] = #150000 1'b1;
	DA_in[19] = #20000 1'b0;
end 
// DA_in[ 18 ]
initial
begin
	DA_in[18] = 1'b0;
	DA_in[18] = #230000 1'b1;
	DA_in[18] = #20000 1'b0;
end 
// DA_in[ 17 ]
initial
begin
	DA_in[17] = 1'b0;
	DA_in[17] = #60000 1'b1;
	DA_in[17] = #20000 1'b0;
end 
// DA_in[ 16 ]
initial
begin
	DA_in[16] = 1'b0;
end 
// DA_in[ 15 ]
initial
begin
	DA_in[15] = 1'b0;
	DA_in[15] = #60000 1'b1;
	DA_in[15] = #20000 1'b0;
	DA_in[15] = #150000 1'b1;
	DA_in[15] = #20000 1'b0;
end 
// DA_in[ 14 ]
initial
begin
	DA_in[14] = 1'b0;
	DA_in[14] = #230000 1'b1;
	DA_in[14] = #20000 1'b0;
end 
// DA_in[ 13 ]
initial
begin
	DA_in[13] = 1'b0;
	DA_in[13] = #60000 1'b1;
	DA_in[13] = #20000 1'b0;
end 
// DA_in[ 12 ]
initial
begin
	DA_in[12] = 1'b0;
end 
// DA_in[ 11 ]
initial
begin
	DA_in[11] = 1'b0;
	DA_in[11] = #60000 1'b1;
	DA_in[11] = #20000 1'b0;
	DA_in[11] = #150000 1'b1;
	DA_in[11] = #20000 1'b0;
end 
// DA_in[ 10 ]
initial
begin
	DA_in[10] = 1'b0;
	DA_in[10] = #230000 1'b1;
	DA_in[10] = #20000 1'b0;
end 
// DA_in[ 9 ]
initial
begin
	DA_in[9] = 1'b0;
	DA_in[9] = #60000 1'b1;
	DA_in[9] = #20000 1'b0;
end 
// DA_in[ 8 ]
initial
begin
	DA_in[8] = 1'b0;
end 
// DA_in[ 7 ]
initial
begin
	DA_in[7] = 1'b0;
	DA_in[7] = #60000 1'b1;
	DA_in[7] = #20000 1'b0;
	DA_in[7] = #150000 1'b1;
	DA_in[7] = #20000 1'b0;
end 
// DA_in[ 6 ]
initial
begin
	DA_in[6] = 1'b0;
	DA_in[6] = #230000 1'b1;
	DA_in[6] = #20000 1'b0;
end 
// DA_in[ 5 ]
initial
begin
	DA_in[5] = 1'b0;
	DA_in[5] = #60000 1'b1;
	DA_in[5] = #20000 1'b0;
end 
// DA_in[ 4 ]
initial
begin
	DA_in[4] = 1'b0;
end 
// DA_in[ 3 ]
initial
begin
	DA_in[3] = 1'b0;
	DA_in[3] = #60000 1'b1;
	DA_in[3] = #20000 1'b0;
	DA_in[3] = #150000 1'b1;
	DA_in[3] = #20000 1'b0;
end 
// DA_in[ 2 ]
initial
begin
	DA_in[2] = 1'b0;
	DA_in[2] = #230000 1'b1;
	DA_in[2] = #20000 1'b0;
end 
// DA_in[ 1 ]
initial
begin
	DA_in[1] = 1'b0;
	DA_in[1] = #60000 1'b1;
	DA_in[1] = #20000 1'b0;
end 
// DA_in[ 0 ]
initial
begin
	DA_in[0] = 1'b0;
end 
// SA_in[ 47 ]
initial
begin
	SA_in[47] = 1'b0;
	SA_in[47] = #60000 1'b1;
	SA_in[47] = #20000 1'b0;
	SA_in[47] = #150000 1'b1;
	SA_in[47] = #20000 1'b0;
end 
// SA_in[ 46 ]
initial
begin
	SA_in[46] = 1'b0;
	SA_in[46] = #230000 1'b1;
	SA_in[46] = #20000 1'b0;
end 
// SA_in[ 45 ]
initial
begin
	SA_in[45] = 1'b0;
	SA_in[45] = #60000 1'b1;
	SA_in[45] = #20000 1'b0;
end 
// SA_in[ 44 ]
initial
begin
	SA_in[44] = 1'b0;
	SA_in[44] = #60000 1'b1;
	SA_in[44] = #20000 1'b0;
	SA_in[44] = #150000 1'b1;
	SA_in[44] = #20000 1'b0;
end 
// SA_in[ 43 ]
initial
begin
	SA_in[43] = 1'b0;
	SA_in[43] = #60000 1'b1;
	SA_in[43] = #20000 1'b0;
	SA_in[43] = #150000 1'b1;
	SA_in[43] = #20000 1'b0;
end 
// SA_in[ 42 ]
initial
begin
	SA_in[42] = 1'b0;
	SA_in[42] = #230000 1'b1;
	SA_in[42] = #20000 1'b0;
end 
// SA_in[ 41 ]
initial
begin
	SA_in[41] = 1'b0;
	SA_in[41] = #60000 1'b1;
	SA_in[41] = #20000 1'b0;
end 
// SA_in[ 40 ]
initial
begin
	SA_in[40] = 1'b0;
	SA_in[40] = #60000 1'b1;
	SA_in[40] = #20000 1'b0;
	SA_in[40] = #150000 1'b1;
	SA_in[40] = #20000 1'b0;
end 
// SA_in[ 39 ]
initial
begin
	SA_in[39] = 1'b0;
	SA_in[39] = #60000 1'b1;
	SA_in[39] = #20000 1'b0;
	SA_in[39] = #150000 1'b1;
	SA_in[39] = #20000 1'b0;
end 
// SA_in[ 38 ]
initial
begin
	SA_in[38] = 1'b0;
	SA_in[38] = #230000 1'b1;
	SA_in[38] = #20000 1'b0;
end 
// SA_in[ 37 ]
initial
begin
	SA_in[37] = 1'b0;
	SA_in[37] = #60000 1'b1;
	SA_in[37] = #20000 1'b0;
end 
// SA_in[ 36 ]
initial
begin
	SA_in[36] = 1'b0;
	SA_in[36] = #60000 1'b1;
	SA_in[36] = #20000 1'b0;
	SA_in[36] = #150000 1'b1;
	SA_in[36] = #20000 1'b0;
end 
// SA_in[ 35 ]
initial
begin
	SA_in[35] = 1'b0;
	SA_in[35] = #60000 1'b1;
	SA_in[35] = #20000 1'b0;
	SA_in[35] = #150000 1'b1;
	SA_in[35] = #20000 1'b0;
end 
// SA_in[ 34 ]
initial
begin
	SA_in[34] = 1'b0;
	SA_in[34] = #230000 1'b1;
	SA_in[34] = #20000 1'b0;
end 
// SA_in[ 33 ]
initial
begin
	SA_in[33] = 1'b0;
	SA_in[33] = #60000 1'b1;
	SA_in[33] = #20000 1'b0;
end 
// SA_in[ 32 ]
initial
begin
	SA_in[32] = 1'b0;
	SA_in[32] = #60000 1'b1;
	SA_in[32] = #20000 1'b0;
	SA_in[32] = #150000 1'b1;
	SA_in[32] = #20000 1'b0;
end 
// SA_in[ 31 ]
initial
begin
	SA_in[31] = 1'b0;
	SA_in[31] = #60000 1'b1;
	SA_in[31] = #20000 1'b0;
	SA_in[31] = #150000 1'b1;
	SA_in[31] = #20000 1'b0;
end 
// SA_in[ 30 ]
initial
begin
	SA_in[30] = 1'b0;
	SA_in[30] = #230000 1'b1;
	SA_in[30] = #20000 1'b0;
end 
// SA_in[ 29 ]
initial
begin
	SA_in[29] = 1'b0;
	SA_in[29] = #60000 1'b1;
	SA_in[29] = #20000 1'b0;
end 
// SA_in[ 28 ]
initial
begin
	SA_in[28] = 1'b0;
	SA_in[28] = #60000 1'b1;
	SA_in[28] = #20000 1'b0;
	SA_in[28] = #150000 1'b1;
	SA_in[28] = #20000 1'b0;
end 
// SA_in[ 27 ]
initial
begin
	SA_in[27] = 1'b0;
	SA_in[27] = #60000 1'b1;
	SA_in[27] = #20000 1'b0;
	SA_in[27] = #150000 1'b1;
	SA_in[27] = #20000 1'b0;
end 
// SA_in[ 26 ]
initial
begin
	SA_in[26] = 1'b0;
	SA_in[26] = #230000 1'b1;
	SA_in[26] = #20000 1'b0;
end 
// SA_in[ 25 ]
initial
begin
	SA_in[25] = 1'b0;
	SA_in[25] = #60000 1'b1;
	SA_in[25] = #20000 1'b0;
end 
// SA_in[ 24 ]
initial
begin
	SA_in[24] = 1'b0;
	SA_in[24] = #60000 1'b1;
	SA_in[24] = #20000 1'b0;
	SA_in[24] = #150000 1'b1;
	SA_in[24] = #20000 1'b0;
end 
// SA_in[ 23 ]
initial
begin
	SA_in[23] = 1'b0;
	SA_in[23] = #60000 1'b1;
	SA_in[23] = #20000 1'b0;
	SA_in[23] = #150000 1'b1;
	SA_in[23] = #20000 1'b0;
end 
// SA_in[ 22 ]
initial
begin
	SA_in[22] = 1'b0;
	SA_in[22] = #230000 1'b1;
	SA_in[22] = #20000 1'b0;
end 
// SA_in[ 21 ]
initial
begin
	SA_in[21] = 1'b0;
	SA_in[21] = #60000 1'b1;
	SA_in[21] = #20000 1'b0;
end 
// SA_in[ 20 ]
initial
begin
	SA_in[20] = 1'b0;
	SA_in[20] = #60000 1'b1;
	SA_in[20] = #20000 1'b0;
	SA_in[20] = #150000 1'b1;
	SA_in[20] = #20000 1'b0;
end 
// SA_in[ 19 ]
initial
begin
	SA_in[19] = 1'b0;
	SA_in[19] = #60000 1'b1;
	SA_in[19] = #20000 1'b0;
	SA_in[19] = #150000 1'b1;
	SA_in[19] = #20000 1'b0;
end 
// SA_in[ 18 ]
initial
begin
	SA_in[18] = 1'b0;
	SA_in[18] = #230000 1'b1;
	SA_in[18] = #20000 1'b0;
end 
// SA_in[ 17 ]
initial
begin
	SA_in[17] = 1'b0;
	SA_in[17] = #60000 1'b1;
	SA_in[17] = #20000 1'b0;
end 
// SA_in[ 16 ]
initial
begin
	SA_in[16] = 1'b0;
	SA_in[16] = #60000 1'b1;
	SA_in[16] = #20000 1'b0;
	SA_in[16] = #150000 1'b1;
	SA_in[16] = #20000 1'b0;
end 
// SA_in[ 15 ]
initial
begin
	SA_in[15] = 1'b0;
	SA_in[15] = #60000 1'b1;
	SA_in[15] = #20000 1'b0;
	SA_in[15] = #150000 1'b1;
	SA_in[15] = #20000 1'b0;
end 
// SA_in[ 14 ]
initial
begin
	SA_in[14] = 1'b0;
	SA_in[14] = #230000 1'b1;
	SA_in[14] = #20000 1'b0;
end 
// SA_in[ 13 ]
initial
begin
	SA_in[13] = 1'b0;
	SA_in[13] = #60000 1'b1;
	SA_in[13] = #20000 1'b0;
end 
// SA_in[ 12 ]
initial
begin
	SA_in[12] = 1'b0;
	SA_in[12] = #60000 1'b1;
	SA_in[12] = #20000 1'b0;
	SA_in[12] = #150000 1'b1;
	SA_in[12] = #20000 1'b0;
end 
// SA_in[ 11 ]
initial
begin
	SA_in[11] = 1'b0;
	SA_in[11] = #60000 1'b1;
	SA_in[11] = #20000 1'b0;
	SA_in[11] = #150000 1'b1;
	SA_in[11] = #20000 1'b0;
end 
// SA_in[ 10 ]
initial
begin
	SA_in[10] = 1'b0;
	SA_in[10] = #230000 1'b1;
	SA_in[10] = #20000 1'b0;
end 
// SA_in[ 9 ]
initial
begin
	SA_in[9] = 1'b0;
	SA_in[9] = #60000 1'b1;
	SA_in[9] = #20000 1'b0;
end 
// SA_in[ 8 ]
initial
begin
	SA_in[8] = 1'b0;
	SA_in[8] = #60000 1'b1;
	SA_in[8] = #20000 1'b0;
	SA_in[8] = #150000 1'b1;
	SA_in[8] = #20000 1'b0;
end 
// SA_in[ 7 ]
initial
begin
	SA_in[7] = 1'b0;
	SA_in[7] = #60000 1'b1;
	SA_in[7] = #20000 1'b0;
	SA_in[7] = #150000 1'b1;
	SA_in[7] = #20000 1'b0;
end 
// SA_in[ 6 ]
initial
begin
	SA_in[6] = 1'b0;
	SA_in[6] = #230000 1'b1;
	SA_in[6] = #20000 1'b0;
end 
// SA_in[ 5 ]
initial
begin
	SA_in[5] = 1'b0;
	SA_in[5] = #60000 1'b1;
	SA_in[5] = #20000 1'b0;
end 
// SA_in[ 4 ]
initial
begin
	SA_in[4] = 1'b0;
	SA_in[4] = #60000 1'b1;
	SA_in[4] = #20000 1'b0;
	SA_in[4] = #150000 1'b1;
	SA_in[4] = #20000 1'b0;
end 
// SA_in[ 3 ]
initial
begin
	SA_in[3] = 1'b0;
	SA_in[3] = #60000 1'b1;
	SA_in[3] = #20000 1'b0;
	SA_in[3] = #150000 1'b1;
	SA_in[3] = #20000 1'b0;
end 
// SA_in[ 2 ]
initial
begin
	SA_in[2] = 1'b0;
	SA_in[2] = #230000 1'b1;
	SA_in[2] = #20000 1'b0;
end 
// SA_in[ 1 ]
initial
begin
	SA_in[1] = 1'b0;
	SA_in[1] = #60000 1'b1;
	SA_in[1] = #20000 1'b0;
end 
// SA_in[ 0 ]
initial
begin
	SA_in[0] = 1'b0;
	SA_in[0] = #60000 1'b1;
	SA_in[0] = #20000 1'b0;
	SA_in[0] = #150000 1'b1;
	SA_in[0] = #20000 1'b0;
end 
// port_in[ 1 ]
initial
begin
	port_in[1] = 1'b0;
	port_in[1] = #60000 1'b1;
	port_in[1] = #20000 1'b0;
	port_in[1] = #150000 1'b1;
	port_in[1] = #20000 1'b0;
end 
// port_in[ 0 ]
initial
begin
	port_in[0] = 1'b0;
	port_in[0] = #60000 1'b1;
	port_in[0] = #20000 1'b0;
end 

// DA_done
initial
begin
	DA_done = 1'b0;
	DA_done = #100000 1'b1;
	DA_done = #20000 1'b0;
end 

// SA_done
initial
begin
	SA_done = 1'b0;
	SA_done = #160000 1'b1;
	SA_done = #20000 1'b0;
end 

// aging_done
initial
begin
	aging_done = 1'b0;
	aging_done = #200000 1'b1;
	aging_done = #20000 1'b0;
end 
endmodule

