// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2017 20:47:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          tx_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tx_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg DA_done;
reg DA_start;
reg hit_in;
reg [1:0] port_in;
reg reset;
// wires                                               
wire broadcast;
wire done;
wire [1:0] port_out;

// assign statements (if any)                          
tx_fsm i1 (
// port map - connection between master ports and signals/registers   
	.broadcast(broadcast),
	.clk(clk),
	.DA_done(DA_done),
	.DA_start(DA_start),
	.done(done),
	.hit_in(hit_in),
	.port_in(port_in),
	.port_out(port_out),
	.reset(reset)
);
initial 
begin 
#200000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #40000 1'b0;
end 

// hit_in
initial
begin
	hit_in = 1'b0;
	hit_in = #60000 1'b1;
	hit_in = #20000 1'b0;
end 
// port_in[ 1 ]
initial
begin
	port_in[1] = 1'b0;
	port_in[1] = #60000 1'b1;
	port_in[1] = #20000 1'b0;
end 
// port_in[ 0 ]
initial
begin
	port_in[0] = 1'b0;
	port_in[0] = #60000 1'b1;
	port_in[0] = #20000 1'b0;
end 

// DA_done
initial
begin
	DA_done = 1'b0;
	DA_done = #60000 1'b1;
	DA_done = #20000 1'b0;
end 

// DA_start
initial
begin
	DA_start = 1'b0;
	DA_start = #160000 1'b1;
	DA_start = #20000 1'b0;
end 
endmodule

